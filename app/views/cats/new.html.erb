<div class="container">
  <div class="jumbotron">
    <div class="question col-6 offset-3 display-4"></div>

    <hr class="my-4">
    <ul class="answers col-6 offset-3 list-group"></ul>

    <div class="col-6 offset-3 mt-5 d-flex justify-content-between">
      <button onclick="prev()" type="button" class="prev btn btn-primary">previous</button>
      <button onclick="next()" type="button" class="next btn btn-success">next</button>
    </div>

    <div class="stepper-container col-6 offset-3 mt-5">
      <div class="stepper-progression"></div>
    </div>
    <div class="stepper-count col-6 offset-3 mt-5 d-flex justify-content-center">0</div>

  </div>
</div>

<style>

  body {
    height: 100vh;
  }

  .hide {
    visibility: hidden;
  }

  li {
    cursor: pointer;
  }

  .stepper-container {
    border: 1px solid lightgrey;
    height: 10px;
    border-radius: 25px;
    padding: 0;
  }

  .stepper-progression {
    height: 100%;
    width: 0%;
    background-color: lightgrey;
    border-radius: 25px;
  }

  .stepper-count {
    font-size: 3rem;
  }

</style>

<script>

  // All variables
  var hash = { "questions":
              [
                { 0: { "question": "What's he called ?",
                    "tree_answer": null,
                    "answers": [
                      [ "Bone", { "next_qst":1 }, { "prev_qst":0 }, { "prev_qst_if_not_answered":0 } ],
                      [ "Ivory", { "next_qst":1 }, { "prev_qst":0 }, { "prev_qst_if_not_answered":0 } ],
                      [ "Skin", { "next_qst":1 }, { "prev_qst":0 }, { "prev_qst_if_not_answered":0 } ]
                    ]
                  },
                },
                { 1: { "question": "How tall is he ?",
                    "tree_answer": null,
                    "answers": [
                      [ "8", { "next_qst":2 }, { "prev_qst":0 }, { "prev_qst_if_not_answered":1 } ],
                      [ "2", { "next_qst":2 }, { "prev_qst":0 }, { "prev_qst_if_not_answered":1 } ],
                      [ "6", { "next_qst":2 }, { "prev_qst":0 }, { "prev_qst_if_not_answered":1 } ]
                    ]
                  },
                },
                { 2: { "question": "How old is he ?",
                    "tree_answer": null,
                    "answers": [
                      [ "1", { "next_qst":3 }, { "prev_qst":1 }, { "prev_qst_if_not_answered":2 } ],
                      [ "3", { "next_qst":3 }, { "prev_qst":1 }, { "prev_qst_if_not_answered":2 } ],
                      [ "5", { "next_qst":3 }, { "prev_qst":1 }, { "prev_qst_if_not_answered":2 } ]
                    ]
                  },
                },
                { 3: { "question": "What gender is he ?",
                    "tree_answer": [ "Male", { "next_qst":5 }, { "prev_qst":2 }, { "prev_qst_if_not_answered":3 } ],
                    "answers": [
                      [ "Female", { "next_qst":4 }, { "prev_qst":2 }, { "prev_qst_if_not_answered":3 } ]
                    ]
                  },
                },
                { 4: { "question": "What color is she ?",
                    "tree_answer": null,
                    "answers": [
                      [ "White", { "next_qst":6 }, { "prev_qst":3 }, { "prev_qst_if_not_answered":4 }],
                      [ "Pink", { "next_qst":6 }, { "prev_qst":3 }, { "prev_qst_if_not_answered":4 } ]
                    ]
                  },
                },
                { 5: { "question": "What color is he ?",
                    "tree_answer": null,
                    "answers": [
                      [ "Black", { "next_qst":6 }, { "prev_qst":3 }, { "prev_qst_if_not_answered":5 } ],
                      [ "Blue", { "next_qst":6 }, { "prev_qst":3 }, { "prev_qst_if_not_answered":5 } ]
                    ]
                  },
                },
                { 6: { "question": "Is it for special gift ?",
                    "tree_answer": null,
                    "answers": [
                      [ "Yes", { "next_qst":7 }, { "prev_qst":3 }, { "prev_qst_if_not_answered":6 } ],
                      [ "No", { "next_qst":7 }, { "prev_qst":3 }, { "prev_qst_if_not_answered":6 } ]
                    ]
                  },
                },
              ]
            }

  var question_div = $('.question');
  var answers_ul = $('.answers')
  var answers_html = "";
  var answers = [];
  var answer = "";
  var next_qst_index = null;
  var prev_qst_index = null;
  var prev_qst_index_if_not_answered = null;
  var question = "";
  var next_question = $('.next');
  var prev_question = $('.prev');
  var start_index = 0;
  var i;
  var selected_index_to_next = null;
  var selected_index_to_prev = null;
  var stepper_width = '';
  var stepper_progression = $('.stepper-progression');
  var stepper_count = $('.stepper-count');
  var answered = false;
  var number_of_prev_click = 0;

  // Function is called first when document is ready
  function start() {
    prev_question.addClass('hide');
    next_question.prop("disabled", true);

    question = hash.questions[start_index][start_index].question
    question_div.html(`<h1>${question}</h1>`);

    answers = [...hash.questions[start_index][start_index].answers,
              hash.questions[start_index][start_index].tree_answer]
    answers = answers.filter(function(element){ return element != null })

    for (i = 0; i < answers.length; i++) {
      answer = answers[i][0]
      next_qst_index = answers[i][1].next_qst
      prev_qst_index = answers[i][2].prev_qst
      prev_qst_index_if_not_answered = answers[i][3].prev_qst_if_not_answered

      answers_html += `<li
                      onclick="selectAnswer(${next_qst_index},${prev_qst_index},${prev_qst_index_if_not_answered})"
                      class="list-group-item">
                        ${answer}
                      </li>`

      answers_ul.html(answers_html);
    }
  }; start();

  // Function is called when user click on next button and submit the updated form
  function next() {
    answers_html = "";
    answered = false;

    next_question.prop("disabled", true);

    question = hash.questions[selected_index_to_next][selected_index_to_next].question
    question_div.html(`<h1>${question}</h1>`);

    answers = [...hash.questions[selected_index_to_next][selected_index_to_next].answers,
              hash.questions[selected_index_to_next][selected_index_to_next].tree_answer]
    answers = answers.filter(function(element){ return element != null })

    for (i = 0; i < answers.length; i++) {
      answer = answers[i][0]
      next_qst_index = answers[i][1].next_qst
      prev_qst_index = answers[i][2].prev_qst
      prev_qst_index_if_not_answered = answers[i][3].prev_qst_if_not_answered

      answers_html += `<li
                      onclick="selectAnswer(${next_qst_index},${prev_qst_index},${prev_qst_index_if_not_answered})"
                      class="list-group-item">
                        ${answer}
                      </li>`

      answers_ul.html(answers_html);
    }

    if (next_qst_index > 0) prev_question.removeClass('hide');
    if (selected_index_to_next == hash.questions.length - 1) next_question.addClass('hide');

    console.log('######## NEXT METHOD ########');
    console.log('question indexes: ' + selected_index_to_next +', '+ selected_index_to_prev +', '+
                selected_index_to_prev_if_not_answered);
    console.log('current question index: ' + selected_index_to_next);
    console.log('prev question index: ' + selected_index_to_prev);
    console.log('prev question index if not answered: ' + selected_index_to_prev_if_not_answered);
    console.log('answered: ' + answered);

    stepperProgression(selected_index_to_next, hash.questions.length);
  };

  // Function is called when user click on previous button
  function prev() {
    answers_html = "";

    if (answered) {
      prevIfAnswered();
    } else {
      prevIfNotAnswered();
    }

    if (prev_qst_index == null) prev_question.addClass('hide');

    console.log('######## PREV METHOD ########');
    console.log('question indexes: ' + selected_index_to_next +', '+ selected_index_to_prev +', '+
                selected_index_to_prev_if_not_answered);
    console.log('next question index: ' + selected_index_to_next);
    console.log('current question index: ' + selected_index_to_prev);
    console.log('prev question index if not answered: ' + selected_index_to_prev_if_not_answered);
    console.log('answered: ' + answered);
  };

  // Function is called when the user answered (answer selected)
  function prevIfAnswered() {
    question = hash.questions[selected_index_to_prev][selected_index_to_prev].question;
    question_div.html(`<h1>${question}</h1>`);

    answers = [...hash.questions[selected_index_to_prev][selected_index_to_prev].answers,
              hash.questions[selected_index_to_prev][selected_index_to_prev].tree_answer];
    answers = answers.filter(function(element){ return element != null });

    for (i = 0; i < answers.length; i++) {
      answer = answers[i][0];
      next_qst_index = answers[i][1].next_qst;
      prev_qst_index = answers[i][2].prev_qst;
      prev_qst_index_if_not_answered = answers[i][3].prev_qst_if_not_answered;

      answers_html += `<li
                      onclick="selectAnswer(${next_qst_index},${prev_qst_index},${prev_qst_index_if_not_answered})"
                      class="list-group-item">
                        ${answer}
                      </li>`

      answers_ul.html(answers_html);
    };
  };

  // Function is called when the user do not answer (no answer selected)
  function prevIfNotAnswered() {
    number_of_prev_click ++
    console.log('number of click on prev button: ' + number_of_prev_click)



    question = hash.questions[selected_index_to_prev_if_not_answered][selected_index_to_prev_if_not_answered].question;
    question_div.html(`<h1>${question}</h1>`);

    answers = [...hash.questions[selected_index_to_prev_if_not_answered][selected_index_to_prev_if_not_answered].answers, hash.questions[selected_index_to_prev_if_not_answered][selected_index_to_prev_if_not_answered].tree_answer];
    answers = answers.filter(function(element){ return element != null });

    for (i = 0; i < answers.length; i++) {
      answer = answers[i][0];
      next_qst_index = answers[i][1].next_qst;
      prev_qst_index = answers[i][2].prev_qst;
      prev_qst_index_if_not_answered = answers[i][3].prev_qst_if_not_answered;

      answers_html += `<li
                      onclick="selectAnswer(${next_qst_index},${prev_qst_index},${prev_qst_index_if_not_answered})"
                      class="list-group-item">
                        ${answer}
                      </li>`

      answers_ul.html(answers_html);
    };
  };

  // Function is called when the select an answer
  function selectAnswer(next_qst_index, prev_qst_index) {
    selected_index_to_next = next_qst_index;
    selected_index_to_prev = prev_qst_index;
    selected_index_to_prev_if_not_answered = prev_qst_index_if_not_answered;
    answered = true;

    next_question.prop("disabled", false);

    console.log('######## SELECT ANSWER METHOD ########');
    console.log('next question index: ' + selected_index_to_next);
    console.log('prev question index: ' + selected_index_to_prev);
    console.log('prev question index if not answered: ' + selected_index_to_prev_if_not_answered);
    console.log('answered: ' + answered);
  }

  // Function is called eac time next() and prev() methods are called
  function stepperProgression(current_question, questions_length) {
    var width = Math.round((current_question * 100) / questions_length)

    stepper_progression.css('width', `${width}%`);
    stepper_count.html(`${10*Math.floor(width/10)}%`)
  }


</script>
